#+TITLE: Fundamentos de Matemática Financeira
#+AUTHOR: Henrique Carvalho Alves
#+EMAIL: henrique.alves@nubank.com.br
#+LANGUAGE: pt
#+LATEX_HEADER: \usepackage{parskip} \usepackage{amsmath} \usepackage[AUTO]{babel}
#+PROPERTY: header-args :session *cider-org* :exports both

#+begin_src clojure :exports none :results silent
(use 'sample)
(use 'sicmutils.env)
(require 'clojure.string)

;; Set precision for BigDecimal math
(import 'java.math.MathContext)
(set! *math-context* (new java.math.MathContext 5 java.math.RoundingMode/HALF_EVEN))

;; Render equations by default
(defmethod print-method sample.Equation [v ^java.io.Writer w]
  (.write w (render v)))
#+end_src

\newpage

* Juros
** Conceito
   
   Dado o capital (ou valor presente) ${PV}$, a taxa de juros (%) $i$, o juro
   $I$ e o saldo (ou valor futuro) $FV$, as principais equações são:

   #+begin_src clojure :results latex :exports results
(align
 (eq 'I (simplify (interest (simple 'i) 1 'PV)))
 (eq 'FV (fv (simple 'i) 1 'PV))
 (eq 'PV (pv (simple 'i) 1 'FV))
 (eq 'i (rate 'FV 'PV)))
   #+end_src

   #+RESULTS:
   #+begin_export latex
   \begin{align}I &= {PV}\,i\\{FV} &= {PV}\,\left(1 + i\right)\\{PV} &= \frac{{FV}}{1 + i}\\i &= \left(\frac{{FV}}{{PV}}\right) - 1\end{align}
   #+end_export

   *Exemplos:*

   Um capital de $ 1000 aplicado durante um ano à taxa de 22% ao ano.

   O juro é dado por:
   #+begin_src clojure
(* 1000 0.22M)
   #+end_src

   #+RESULTS:
   : 220.0

   O saldo ao fim do período é dado por:
   #+begin_src clojure
(* 1000 1.22M)
   #+end_src

   #+RESULTS:
   : 1220.0

   O capital que aplicamos para obter $ 1220 à mesma taxa é:
   #+begin_src clojure
(/ 1220 1.22M)
   #+end_src

   #+RESULTS:
   : 1000.0

   A taxa de juros pode ser inferida por:
   #+begin_src clojure
(- (/ 1220 1000) 1M)
   #+end_src

   #+RESULTS:
   : 11/50

   Nesse caso, $i$ representa a taxa de juros ao longo de um período inteiro.
   Quando aplicamos o capital por mais de um período (por exemplo, 22% ao ano durante dois anos), é preciso adotar uma de duas convenções para o cálculo: *juros simples* ou *juros compostos*.

   \newpage
  
** Juros simples
*** Valor futuro

    Para obter o saldo após $n$ períodos a *juros simples*, aplica-se a taxa $i$ ao mesmo capital $PV$ por $n$ vezes:
    #+begin_src clojure :results latex :exports results
(align
 (eq 'FV
     (* (i->series (simple 'i)) 'PV)
     (fv (simple 'i) 'n 'PV)))
    #+end_src

    #+RESULTS:
    #+begin_export latex
    \begin{align*}{FV} &= {PV} + {PV}\,i + {PV}\,i + {PV}\,i + \ldots \\&= {PV}\,\left(1 + i\,n\right)\end{align*}
    #+end_export

    Assim, o juro simples $I_S$ é uma função *linear* do período $n$:
    #+begin_src clojure :results latex :exports results
(align
 (eq (symbol "I_S(n)") (interest (simple 'i) 'n 'PV)))
    #+end_src

    #+RESULTS:
    #+begin_export latex
    \begin{align*}{I_S(n)} &= {PV}\,i\,n\end{align*}
    #+end_export

    *Exemplo:*

    Um capital de $ 1000 aplicado à taxa de 8% ao mês segue a progressão:
    #+begin_src clojure :results latex :exports results
(align (eq 'FV (* 1000 (i->series (simple 0.08M)))))
    #+end_src

    #+RESULTS:
    #+begin_export latex
    \begin{align*}{FV} &= 1000 + 80.00000000000007 + 79.99999999999984 + 80.00000000000007 + \ldots\end{align*}
    #+end_export

    Portanto o saldo ao fim de 3 meses equivale a:
    #+begin_src clojure
(* 1000 ((simple 0.08M) 3))
    #+end_src

    #+RESULTS:
    : 1240.0

*** Valor presente

    Para obter o capital equivalente ao saldo após $n$ períodos a *juros simples*, desconta-se a taxa $i$ do saldo $n$ vezes:
    #+begin_src clojure :results latex :exports results
(align
 (eq 'PV
     (/ (i->series (simple 'i)) 'FV)
     (pv (simple 'i) 'n 'FV)))
    #+end_src

    #+RESULTS:
    #+begin_export latex
    \begin{align*}{PV} &= \left(\frac{1}{{FV}}\right) + \left(\frac{i}{{FV}}\right) + \left(\frac{i}{{FV}}\right) + \left(\frac{i}{{FV}}\right) + \ldots \\&= \frac{{FV}}{1 + i\,n}\end{align*}
    #+end_export

    Assim, o capital que equivale a este saldo (ou ainda, o valor futuro trazido a valor presente) na mesma taxa é:
    #+begin_src clojure
(/ 1240 ((simple 0.08M) 3))
    #+end_src

    #+RESULTS:
    : 1000.0

*** Equivalência de taxas
   
    São equivalentes as taxas $i_1$ e $i_2$ se, aplicadas nos períodos $p_1$ e $p_2$ relativos a duração das respectivas taxas, resultam no mesmo valor futuro $FV$.
    #+begin_src clojure :results latex :exports results
(align (eq 'FV (fv (simple 'i_1) 'p_1 'PV) (fv (simple 'i_2) 'p_2 'PV)))
    #+end_src

    #+RESULTS:
    #+begin_export latex
    \begin{align*}{FV} &= {PV}\,\left(1 + i_1\,p_1\right) \\&= {PV}\,\left(1 + i_2\,p_2\right)\end{align*}
    #+end_export

    Simplificando:
    #+begin_src clojure :results latex :exports results
(align (eq (simplify (interest (simple 'i_1) 'p_1 1))
           (simplify (interest (simple 'i_2) 'p_2 1))))
    #+end_src

    #+RESULTS:
    #+begin_export latex
    \begin{align*}i_1\,p_1 &= i_2\,p_2\end{align*}
    #+end_export

    *Exemplo:*

    Qual a taxa mensal equivalente a 22% ao ano em juros simples?
    #+begin_src clojure
(* 0.22M 1/12)
    #+end_src

    #+RESULTS:
    : 0.018333333333333333

    Prova:
    #+begin_src clojure
(rate (* ((simple 0.018333M) 12) 1000) 1000)
    #+end_src

    #+RESULTS:
    : 0.21999600000000008

    \newpage

** Juros compostos
*** Valor futuro

    Para obter o saldo ao final de $n$ períodos a *juros simples*, aplica-se a taxa $i$ sobre cada saldo $n$ vezes:
    #+begin_src clojure :results latex :exports results
(align
 (eq 'FV (* (i->series (compound 'i)) 'PV) (fv (compound 'i) 'n 'PV)))
    #+end_src

    #+RESULTS:
    #+begin_export latex
    \begin{align*}{FV} &= {PV} + {PV}\,i + \left({PV}\,{i}^{2} + {PV}\,i\right) + \left({PV}\,{i}^{3} + 2\,{PV}\,{i}^{2} + {PV}\,i\right) + \ldots \\&= {PV}\,{\left(1 + i\right)}^{n}\end{align*}
    #+end_export

    Assim, diferente do juro simples, o juro $I_C$ é uma função *não-linear* do período $n$:
    #+begin_src clojure :results latex :exports results
(align
 (eq (symbol "I_C(n)") (interest (compound 'i) 'n 'PV)))
    #+end_src

    #+RESULTS:
    #+begin_export latex
    \begin{align*}{I_C(n)} &= {PV}\,{\left(i + 1\right)}^{n} - {PV}\end{align*}
    #+end_export

    *Exemplo:*

    Um capital de $ 1000 aplicado à taxa de 8% ao mês segue a progressão:
    #+begin_src clojure :results latex :exports results
(align (eq 'FV (* 1000 (i->series (compound 0.08M)))))
    #+end_src

    #+RESULTS:
    #+begin_export latex
    \begin{align*}{FV} &= 1000 + 80.00000000000007 + 86.40000000000003 + 93.31200000000007 + \ldots\end{align*}
    #+end_export

    Portanto o saldo ao fim de 3 meses equivale a:
   
    #+begin_src clojure
(* 1000 ((compound 0.08M) 3))
    #+end_src

    #+RESULTS:
    : 1259.7120000000002

*** Valor presente

    Para obter o capital equivalente ao saldo após $n$ períodos a *juros compostos*, desconta-se a taxa $i$ de cada saldo $n$ vezes:
    #+begin_src clojure :results latex :exports results
(align
 (eq 'PV
     (/ (i->series (compound 'i)) 'FV)
     (pv (compound 'i) 'n 'FV)))
    #+end_src

    #+RESULTS:
    #+begin_export latex
    \begin{align*}{PV} &= \left(\frac{1}{{FV}}\right) + \left(\frac{i}{{FV}}\right) + \left(\frac{{i}^{2} + i}{{FV}}\right) + \left(\frac{{i}^{3} + 2\,{i}^{2} + i}{{FV}}\right) + \ldots \\&= \frac{{FV}}{{\left(1 + i\right)}^{n}}\end{align*}
    #+end_export

    Assim, o capital que equivale a este saldo (ou ainda, o valor futuro trazido a valor presente) na mesma taxa é:
    #+begin_src clojure
(/ 1259.7M ((compound 0.08M) 3))
    #+end_src

    #+RESULTS:
    : 999.9904740131077

*** Equivalência de taxas
   
    São equivalentes as taxas $i_1$ e $i_2$ se, aplicadas nos períodos $p_1$ e $p_2$ relativos a duração das respectivas taxas, resultam no mesmo valor futuro $FV$.
    #+begin_src clojure :results latex :exports results
(align (eq 'FV (fv (compound 'i_1) 'p_1 'PV) (fv (compound 'i_2) 'p_2 'PV)))
    #+end_src

    #+RESULTS:
    #+begin_export latex
    \begin{align*}{FV} &= {PV}\,{\left(1 + i_1\right)}^{p_1} \\&= {PV}\,{\left(1 + i_2\right)}^{p_2}\end{align*}
    #+end_export

    Simplificando:
    #+begin_src clojure :results latex :exports results
(align (eq (simplify (interest (compound 'i_1) 'p_1 1))
           (simplify (interest (compound 'i_2) 'p_2 1))))
    #+end_src

    #+RESULTS:
    #+begin_export latex
    \begin{align*}{\left(i_1 + 1\right)}^{p_1} + -1 &= {\left(i_2 + 1\right)}^{p_2} + -1\end{align*}
    #+end_export

    *Exemplo:*

    Qual a taxa mensal equivalente a 12.55% ao ano em juros compostos?
    #+begin_src clojure
(- (expt (+ 0.1255M 1) 1/12) 1)
    #+end_src

    #+RESULTS:
    : 0.009900975291211367

    Prova:
    #+begin_src clojure
(rate (* ((compound 0.0099M) 12) 1000) 1000)
    #+end_src

    #+RESULTS:
    : 0.1254869569260173

    \newpage
    
*** Taxas variáveis

    Quando a taxa de juros não permanece constante a cada período, podemos generalizar as fórmulas do valor futuro $FV$ e juro $I$ para um vetor $i$.
    
    Para isso, partimos da definição da taxa efetiva $i_e$, que equivale a aplicar cada taxa consecutivamente, e substituir $i$ nas outras fórmulas:
    
    #+begin_src clojure :results latex :exports results
(let [i ['i_1 'i_2 'i_3 '... 'i_n]
      accfn (compound-index i)]
  (align
   (eq 'i (apply down i))
   (eq 'i_e
       (interest accfn 'n 1))
   (eq 'FV
       (fv (constantly 'i_e) 1 'PV)
       (fv accfn 'n 'PV))
   (eq 'I
       (interest (constantly 'i_e) 1 'PV)
       (interest accfn 'n 'PV))))
    #+end_src

    #+RESULTS:
    #+begin_export latex
    \begin{align}i &= \begin{bmatrix}\displaystyle{i_1}&\displaystyle{i_2}&\displaystyle{i_3}&\displaystyle{\ldots}&\displaystyle{i_n}\end{bmatrix}\\i_e &= \left(1 + i_1\right)\,\left(1 + i_2\right)\,\left(1 + i_3\right)\,\left(1 + \ldots\right)\,\left(1 + i_n\right) - 1\\{FV} &= {PV}\,i_e \\&= {PV}\,\left(1 + i_1\right)\,\left(1 + i_2\right)\,\left(1 + i_3\right)\,\left(1 + \ldots\right)\,\left(1 + i_n\right)\\I &= {PV}\,\left(i_e - 1\right) \\&= {PV}\,\left(\left(1 + i_1\right)\,\left(1 + i_2\right)\,\left(1 + i_3\right)\,\left(1 + \ldots\right)\,\left(1 + i_n\right) - 1\right)\end{align}
    #+end_export

    *Exemplo:*

    Em três meses consecutivos, uma aplicação de $ 16000 rendeu 1.3%, 1.7% e 2.1%.

    Qual o valor ($) do rendimento?
    #+begin_src clojure
(let [i (compound-index [0.013 0.017 0.021])]
  (interest i 3 16000))
    #+end_src

    #+RESULTS:
    : 829.6902559999957

    Qual a rentabilidade (%) no trimestre?
    #+begin_src clojure
(let [c 16000
      i (compound-index [0.013 0.017 0.021])]
  (rate (fv i 3 c) c))
    #+end_src

    #+RESULTS:
    : 0.05185564099999973

    Ou ainda, independente do capital aplicado:
    #+begin_src clojure
(let [i (compound-index [0.013 0.017 0.021])]
  (- (i 3) 1))
    #+end_src

    #+RESULTS:
    : 0.05185564099999973
    
